#!/bin/bash

# HTML Report Generator for Server Monitoring Script
# Converts the text-based report into a formatted HTML page

# Set script variables
SCRIPT_DIR="/tmp/server_report_*"  # Will use the latest report directory
REPORT_HTML="/tmp/server_report.html"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Find the latest report directory
LATEST_DIR=$(ls -td $SCRIPT_DIR | head -n 1)
if [ -z "$LATEST_DIR" ]; then
    echo -e "${RED}No report directory found. Please run the monitoring script first.${NC}"
    exit 1
fi

echo -e "${GREEN}Generating HTML report from: $LATEST_DIR${NC}"

# Function to convert text to HTML with basic formatting
format_text_to_html() {
    local input_file="$1"
    local output_file="$2"
    
    echo "<pre>" > "$output_file"
    # Convert special characters to HTML entities and preserve formatting
    sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g' "$input_file" >> "$output_file"
    echo "</pre>" >> "$output_file"
}

# Function to create a section in the HTML
create_section() {
    local title="$1"
    local content_file="$2"
    local section_id=$(echo "$title" | tr ' ' '_' | tr '[:upper:]' '[:lower:]')
    
    echo "<div class=\"section\" id=\"$section_id\">" >> "$REPORT_HTML"
    echo "<h2 class=\"section-header\" onclick=\"toggleSection('$section_id')\">$title</h2>" >> "$REPORT_HTML"
    echo "<div class=\"section-content\">" >> "$REPORT_HTML"
    
    if [ -f "$content_file" ]; then
        format_text_to_html "$content_file" "/tmp/temp_html_content.txt"
        cat "/tmp/temp_html_content.txt" >> "$REPORT_HTML"
    else
        echo "<p>No data available for this section.</p>" >> "$REPORT_HTML"
    fi
    
    echo "</div></div>" >> "$REPORT_HTML"
}

# Start creating the HTML file
cat > "$REPORT_HTML" << EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Server Monitoring Report</title>
    <style>
        body {
            font-family: 'Courier New', monospace;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        header {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid #eee;
        }
        h1 {
            color: #2c3e50;
            margin-bottom: 10px;
        }
        .report-info {
            color: #7f8c8d;
            font-size: 14px;
        }
        .section {
            margin-bottom: 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
            overflow: hidden;
        }
        .section-header {
            background-color: #3498db;
            color: white;
            padding: 12px 15px;
            margin: 0;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .section-header:hover {
            background-color: #2980b9;
        }
        .section-header::after {
            content: "âˆ’";
            font-weight: bold;
        }
        .section-header.collapsed::after {
            content: "+";
        }
        .section-content {
            padding: 15px;
            background-color: white;
            max-height: 1000px;
            overflow: auto;
            transition: max-height 0.3s ease;
        }
        .section-content.collapsed {
            max-height: 0;
            padding: 0 15px;
            overflow: hidden;
        }
        pre {
            white-space: pre-wrap;
            word-break: break-all;
            font-family: 'Courier New', monospace;
            font-size: 12px;
            line-height: 1.4;
            margin: 0;
        }
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .summary-card {
            background: #f8f9fa;
            border-left: 4px solid #3498db;
            padding: 15px;
            border-radius: 4px;
        }
        .summary-card h3 {
            margin-top: 0;
            color: #2c3e50;
        }
        .status-good {
            color: #27ae60;
            font-weight: bold;
        }
        .status-warning {
            color: #f39c12;
            font-weight: bold;
        }
        .status-bad {
            color: #e74c3c;
            font-weight: bold;
        }
        .nav-tabs {
            display: flex;
            list-style: none;
            padding: 0;
            margin: 0 0 20px 0;
            border-bottom: 1px solid #ddd;
        }
        .nav-tabs li {
            margin-right: 5px;
        }
        .nav-tabs a {
            display: block;
            padding: 8px 15px;
            text-decoration: none;
            color: #7f8c8d;
            border: 1px solid transparent;
            border-bottom: none;
            border-radius: 4px 4px 0 0;
        }
        .nav-tabs a:hover {
            background-color: #eee;
        }
        .nav-tabs a.active {
            color: #3498db;
            border-color: #ddd;
            border-bottom-color: white;
            background-color: white;
        }
        @media (max-width: 768px) {
            .summary-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Server Monitoring Report</h1>
            <div class="report-info">
EOF

# Add report generation time
echo "Generated on: $(date)" >> "$REPORT_HTML"
echo "From data in: $LATEST_DIR" >> "$REPORT_HTML"

cat >> "$REPORT_HTML" << EOF
            </div>
        </header>
        
        <div class="summary-grid">
EOF

# Extract summary information for the cards
if [ -f "$LATEST_DIR/SUMMARY_REPORT.txt" ]; then
    # System information
    hostname=$(grep "Hostname:" "$LATEST_DIR/SUMMARY_REPORT.txt" | cut -d':' -f2- | xargs)
    os_version=$(grep "OS Version:" "$LATEST_DIR/SUMMARY_REPORT.txt" | cut -d':' -f2- | xargs)
    kernel=$(grep "Kernel:" "$LATEST_DIR/SUMMARY_REPORT.txt" | cut -d':' -f2- | xargs)
    uptime=$(grep "Uptime:" "$LATEST_DIR/SUMMARY_REPORT.txt" | cut -d':' -f2- | xargs)
    
    # Hardware summary
    cpu_model=$(grep "CPU:" "$LATEST_DIR/SUMMARY_REPORT.txt" | cut -d':' -f2- | xargs)
    cpu_cores=$(grep "CPU Cores:" "$LATEST_DIR/SUMMARY_REPORT.txt" | cut -d':' -f2- | xargs)
    memory=$(grep "Memory:" "$LATEST_DIR/SUMMARY_REPORT.txt" | cut -d':' -f2- | xargs)
    disk_usage=$(grep "Disk Usage:" "$LATEST_DIR/SUMMARY_REPORT.txt" | cut -d':' -f2- | xargs)
    
    # Current load
    load_avg=$(grep "Load Average:" "$LATEST_DIR/SUMMARY_REPORT.txt" | cut -d':' -f2- | xargs)
    cpu_usage=$(grep "CPU Usage:" "$LATEST_DIR/SUMMARY_REPORT.txt" | cut -d':' -f2- | xargs)
    mem_usage=$(grep "Memory Usage:" "$LATEST_DIR/SUMMARY_REPORT.txt" | cut -d':' -f2- | xargs)
    
    # Services status
    tomcat_status=$(grep "Tomcat:" "$LATEST_DIR/SUMMARY_REPORT.txt" | cut -d':' -f2- | xargs)
    postgres_status=$(grep "PostgreSQL:" "$LATEST_DIR/SUMMARY_REPORT.txt" | cut -d':' -f2- | xargs)
    
    # Create summary cards
    cat >> "$REPORT_HTML" << EOF
            <div class="summary-card">
                <h3>System Information</h3>
                <p><strong>Hostname:</strong> $hostname</p>
                <p><strong>OS Version:</strong> $os_version</p>
                <p><strong>Kernel:</strong> $kernel</p>
                <p><strong>Uptime:</strong> $uptime</p>
            </div>
            
            <div class="summary-card">
                <h3>Hardware</h3>
                <p><strong>CPU:</strong> $cpu_model</p>
                <p><strong>Cores:</strong> $cpu_cores</p>
                <p><strong>Memory:</strong> $memory</p>
                <p><strong>Disk Usage:</strong> $disk_usage</p>
            </div>
            
            <div class="summary-card">
                <h3>Current Load</h3>
                <p><strong>Load Average:</strong> $load_avg</p>
                <p><strong>CPU Usage:</strong> $cpu_usage</p>
                <p><strong>Memory Usage:</strong> $mem_usage</p>
            </div>
            
            <div class="summary-card">
                <h3>Services Status</h3>
                <p><strong>Tomcat:</strong> $tomcat_status</p>
                <p><strong>PostgreSQL:</strong> $postgres_status</p>
            </div>
EOF
fi

cat >> "$REPORT_HTML" << EOF
        </div>
        
        <ul class="nav-tabs">
            <li><a href="#system-information" class="active">System</a></li>
            <li><a href="#performance">Performance</a></li>
            <li><a href="#services">Services</a></li>
            <li><a href="#tomcat">Tomcat</a></li>
            <li><a href="#postgresql">PostgreSQL</a></li>
            <li><a href="#logs">Logs</a></li>
            <li><a href="#network">Network</a></li>
        </ul>
        
        <div class="report-content">
EOF

# Create each section of the report
create_section "System Information" "$LATEST_DIR/SUMMARY_REPORT.txt"
create_section "Hostname and Kernel" "$LATEST_DIR/hostnamectl.txt"
create_section "OS Version" "$LATEST_DIR/os_version.txt"
create_section "Uptime" "$LATEST_DIR/uptime.txt"
create_section "Current Users" "$LATEST_DIR/current_users.txt"
create_section "Last Logins" "$LATEST_DIR/last_logins.txt"
create_section "CPU Information" "$LATEST_DIR/cpu_info.txt"
create_section "Memory Information" "$LATEST_DIR/memory_info.txt"
create_section "Disk Usage" "$LATEST_DIR/disk_usage.txt"
create_section "Block Devices" "$LATEST_DIR/block_devices.txt"
create_section "Disk Partitions" "$LATEST_DIR/disk_partitions.txt"
create_section "Network Interfaces" "$LATEST_DIR/network_interfaces.txt"
create_section "Routing Table" "$LATEST_DIR/routing_table.txt"
create_section "Listening Ports" "$LATEST_DIR/listening_ports.txt"

create_section "System Performance" "$LATEST_DIR/top_snapshot.txt"
create_section "Top CPU Processes" "$LATEST_DIR/top_cpu_processes.txt"
create_section "Top Memory Processes" "$LATEST_DIR/top_memory_processes.txt"
create_section "I/O Statistics" "$LATEST_DIR/io_stats.txt"
create_section "VM Statistics" "$LATEST_DIR/vm_stats.txt"
create_section "CPU Utilization" "$LATEST_DIR/cpu_utilization.txt"
create_section "Load Average" "$LATEST_DIR/load_average.txt"
create_section "Detailed Memory" "$LATEST_DIR/detailed_memory.txt"
create_section "Detailed CPU" "$LATEST_DIR/detailed_cpu.txt"

create_section "Services Status" "$LATEST_DIR/systemctl_status.txt"
create_section "Running Services" "$LATEST_DIR/running_services.txt"
create_section "Failed Services" "$LATEST_DIR/failed_services.txt"

create_section "Tomcat Processes" "$LATEST_DIR/tomcat_processes.txt"
create_section "Tomcat Configuration Files" "$LATEST_DIR/tomcat_config_files.txt"
create_section "Tomcat Server XML" "$LATEST_DIR/tomcat_server_xml.txt"
create_section "Tomcat Context XML" "$LATEST_DIR/tomcat_context_xml.txt"
create_section "Tomcat Log Files" "$LATEST_DIR/tomcat_log_files.txt"

create_section "PostgreSQL Service Status" "$LATEST_DIR/postgresql_service_status.txt"
create_section "PostgreSQL Processes" "$LATEST_DIR/postgresql_processes.txt"
create_section "PostgreSQL Version" "$LATEST_DIR/postgresql_version.txt"
create_section "PostgreSQL Databases" "$LATEST_DIR/postgresql_databases.txt"
create_section "PostgreSQL Users" "$LATEST_DIR/postgresql_users.txt"
create_section "PostgreSQL Configuration" "$LATEST_DIR/postgresql_conf.txt"
create_section "PostgreSQL Activity" "$LATEST_DIR/postgresql_activity.txt"
create_section "PostgreSQL Database Stats" "$LATEST_DIR/postgresql_db_stats.txt"
create_section "PostgreSQL Table Stats" "$LATEST_DIR/postgresql_table_stats.txt"
create_section "PostgreSQL Connection Details" "$LATEST_DIR/postgresql_detailed_connections.txt"

create_section "Recent Journal Logs" "$LATEST_DIR/recent_journal_logs.txt"
create_section "System Messages" "$LATEST_DIR/system_messages.txt"
create_section "Security Logs" "$LATEST_DIR/security_logs.txt"
create_section "Kernel Messages" "$LATEST_DIR/kernel_messages.txt"

create_section "Network Interface Stats" "$LATEST_DIR/network_interface_stats.txt"
create_section "Routing Table (Numeric)" "$LATEST_DIR/routing_table_numeric.txt"
create_section "Firewall Rules" "$LATEST_DIR/firewall_rules.txt"
create_section "Firewalld Configuration" "$LATEST_DIR/firewalld_config.txt"

cat >> "$REPORT_HTML" << EOF
        </div>
    </div>
    
    <script>
        function toggleSection(sectionId) {
            const section = document.getElementById(sectionId);
            const content = section.querySelector('.section-content');
            const header = section.querySelector('.section-header');
            
            content.classList.toggle('collapsed');
            header.classList.toggle('collapsed');
        }
        
        // Add tab navigation
        document.addEventListener('DOMContentLoaded', function() {
            const tabs = document.querySelectorAll('.nav-tabs a');
            const sections = document.querySelectorAll('.section');
            
            tabs.forEach(tab => {
                tab.addEventListener('click', function(e) {
                    e.preventDefault();
                    
                    // Remove active class from all tabs
                    tabs.forEach(t => t.classList.remove('active'));
                    
                    // Add active class to clicked tab
                    this.classList.add('active');
                    
                    const targetId = this.getAttribute('href').substring(1);
                    
                    // Show/hide sections based on tab
                    sections.forEach(section => {
                        if (targetId === 'system-information') {
                            // Show all system-related sections
                            if (section.id.includes('system') || 
                                section.id.includes('hostname') ||
                                section.id.includes('os_version') ||
                                section.id.includes('uptime') ||
                                section.id.includes('current_users') ||
                                section.id.includes('last_logins') ||
                                section.id.includes('cpu_information') ||
                                section.id.includes('memory_information') ||
                                section.id.includes('disk') ||
                                section.id.includes('block') ||
                                section.id.includes('network_interfaces') ||
                                section.id.includes('routing_table')) {
                                section.style.display = 'block';
                            } else {
                                section.style.display = 'none';
                            }
                        } else if (targetId === 'performance') {
                            // Show performance sections
                            if (section.id.includes('performance') || 
                                section.id.includes('top') ||
                                section.id.includes('io_statistics') ||
                                section.id.includes('vm_statistics') ||
                                section.id.includes('cpu_utilization') ||
                                section.id.includes('load_average') ||
                                section.id.includes('detailed_memory') ||
                                section.id.includes('detailed_cpu')) {
                                section.style.display = 'block';
                            } else {
                                section.style.display = 'none';
                            }
                        } else if (targetId === 'services') {
                            // Show services sections
                            if (section.id.includes('services_status') || 
                                section.id.includes('running_services') ||
                                section.id.includes('failed_services')) {
                                section.style.display = 'block';
                            } else {
                                section.style.display = 'none';
                            }
                        } else if (targetId === 'tomcat') {
                            // Show tomcat sections
                            if (section.id.includes('tomcat')) {
                                section.style.display = 'block';
                            } else {
                                section.style.display = 'none';
                            }
                        } else if (targetId === 'postgresql') {
                            // Show postgresql sections
                            if (section.id.includes('postgresql')) {
                                section.style.display = 'block';
                            } else {
                                section.style.display = 'none';
                            }
                        } else if (targetId === 'logs') {
                            // Show logs sections
                            if (section.id.includes('logs') || 
                                section.id.includes('journal') ||
                                section.id.includes('messages') ||
                                section.id.includes('security') ||
                                section.id.includes('kernel_messages')) {
                                section.style.display = 'block';
                            } else {
                                section.style.display = 'none';
                            }
                        } else if (targetId === 'network') {
                            // Show network sections
                            if (section.id.includes('network') || 
                                section.id.includes('routing') ||
                                section.id.includes('firewall') ||
                                section.id.includes('firewalld')) {
                                section.style.display = 'block';
                            } else {
                                section.style.display = 'none';
                            }
                        }
                    });
                });
            });
            
            // Collapse all sections by default
            document.querySelectorAll('.section-content').forEach(content => {
                content.classList.add('collapsed');
            });
            document.querySelectorAll('.section-header').forEach(header => {
                header.classList.add('collapsed');
            });
        });
    </script>
</body>
</html>
EOF

# Clean up temporary files
rm -f "/tmp/temp_html_content.txt"

echo -e "${GREEN}HTML report generated: $REPORT_HTML${NC}"
echo -e "${GREEN}You can open this file in a web browser to view the report.${NC}"
